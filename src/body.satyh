@require: pervasives
@require: base/context
@require: base/path
@require: base/graphics
@require: base/length
@require: base/float

@import: types
@import: lib/point
@import: lib/interval

module ArrowBody : sig

type t

% arrow body transformers
val none : t
val union : t -> t -> t
val shift : length -> t -> t
val multiple : int -> float -> t -> t
val cross : (|
  line-width : float;
  size : float;
  ext : float;
|) -> t -> t

% standard arrow bodies
val line : (context -> (|head : length; tail : length|) -> path -> graphics) -> t
val solid : (|
  width : float;
|) -> t
val multi-solid : int -> float -> (|
  width : float;
|) -> t
val dashed : (|
  width : float;
  dash : (|
    fill : float;
    space : float;
    shift : float;
  |);
|) -> t

% mainly for internal usage
val make : (context -> (|
  metadata : arrow-body-metadata;
  draw : (|
    head : arrow-head-metadata;
    tail : arrow-tail-metadata;
  |) -> point -> point -> graphics list;
|)) -> t
val read : t -> context -> (|
  metadata : arrow-body-metadata;
  draw : (|
    head : arrow-head-metadata;
    tail : arrow-tail-metadata;
  |) -> point -> point -> graphics list;
|)

end = struct

type t = context -> (|
  metadata : arrow-body-metadata;
  draw : (|
    head : arrow-head-metadata;
    tail : arrow-tail-metadata;
  |) -> point -> point -> graphics list;
|)

let make f = f
let read body ctx = body ctx

let none _ = (|
  metadata = (|
    mid = Arrow-Interval.zero;
    head = Arrow-Interval.zero;
    tail = Arrow-Interval.zero;
    length = 0pt;
  |);
  draw = fun _ _ _ -> [];
|)

let union body1 body2 ctx =
let b1 = body1 ctx in
let b2 = body2 ctx in
let m1 = b1#metadata in
let m2 = b2#metadata in
(|
  metadata = (|
    mid = Arrow-Interval.union m1#mid m2#mid;
    head = Arrow-Interval.union m1#head m2#head;
    tail = Arrow-Interval.union m1#tail m2#tail;
    length = Length.max m1#length m2#length;
  |);
  draw = fun rec from to -> (
    let gr-l1 = b1#draw rec from to in
    let gr-l2 = b2#draw rec from to in
    List.concat [gr-l1; gr-l2]
  );
|)

let shift p body ctx =
let b = body ctx in
let m = b#metadata in
(|
  metadata = (|
    m with
    mid = Arrow-Interval.shift p m#mid;
    head = Arrow-Interval.shift p m#head;
    tail = Arrow-Interval.shift p m#tail;
  |);
  draw = fun rec from to -> (
    let (x, y) = Arrow-Point.(ratio (to - from)) in
    let r1 = Float.((y, neg x)) in
    let d = Arrow-Point.of-ratio p r1 in
    let z = Arrow-Point.(from + d) in
    let w = Arrow-Point.(to + d) in
    let tail1 = (|
      rec#tail with
      depth = fun q -> rec#tail#depth (q +' p)
    |) in
    let head1 = (|
      rec#head with
      depth = fun q -> rec#head#depth (q +' p)
    |) in
    b#draw (|head = head1; tail = tail1|) z w
  )
|)

let multiple n pd body ctx =
let b = body ctx in
let m = b#metadata in
let w = Arrow-Interval.(width (union m#mid (union m#head m#tail))) in
let d = w +' get-font-size ctx *' pd in
let-rec aux acc p n = (
  if n <= 0 then acc
  else (
    let b1 = shift p body in
    let p1 = p -' d in
    let acc1 = union b1 acc in
    aux acc1 p1 (n - 1)
  )
) in
aux none (d *' Float.(0.5 *. of-int (n - 1))) n ctx

let line stroke ctx =
(|
  metadata = (|
    mid = Arrow-Interval.zero;
    head = Arrow-Interval.zero;
    tail = Arrow-Interval.zero;
    length = 0pt;
  |);
  draw = fun rec from to -> (
    let h = rec#head#depth 0pt in
    let t = rec#tail#depth 0pt in
    let rt = Arrow-Point.(ratio (to - from)) in
    Path.(
      start Arrow-Point.(from + of-ratio t rt)
      |> line-to Arrow-Point.(to - of-ratio h rt)
      |> terminate
    )
    |> stroke ctx (|
      head = h;
      tail = t;
    |)
    |> (fun x -> [x])
  );
|)

let solid rec =
let stroke ctx _ = (
  let w-f = rec#width in
  let width = Context.get-font-size ctx *' w-f in
  let color = Context.get-text-color ctx in
  Graphics.stroke width color
) in
line stroke

let multi-solid n d rec = multiple n d (solid rec)

let dashed rec =
let stroke ctx ht = (
  let w-f = rec#width in
  let fs = Context.get-font-size ctx in
  let width = fs *' w-f in
  let color = Context.get-text-color ctx in
  let dash = (fs *' rec#dash#fill, fs *' rec#dash#space, fs *' rec#dash#shift +' ht#tail) in
  Graphics.dashed-stroke width dash color
) in
line stroke

let cross rec body ctx =
let b = body ctx in
let bm = b#metadata in
let fs = Context.get-font-size ctx in
let color = Context.get-text-color ctx in
let d1 = Length.max (fs *' rec#size) (Arrow-Interval.abs bm#mid) in
let d2 = fs *' rec#ext in
let d = d1 +' d2 in
let lw = fs *' rec#line-width in
(|
  metadata = (|
    bm with
    mid = Arrow-Interval.make (Length.neg d) d;
  |);
  draw = fun ht from to -> (
    let head = ht#head in
    let tail = ht#tail in
    let gr-l1 = b#draw ht from to in
    let gr-l2 = (
      let r = Arrow-Point.(ratio (to - from)) in
      let c = Arrow-Point.(scale 0.5 ((from + of-ratio tail#length r) + (to - of-ratio head#length r))) in
      let (x, y) = r in
      let s = Arrow-Point.of-ratio d (Float.neg y, x) in
      let c1 = Arrow-Point.(c + s) in
      let c2 = Arrow-Point.(c - s) in
      [Path.start c1
       |> Path.line-to c2
       |> Path.terminate
       |> Graphics.stroke lw color]
    ) in
    List.concat [gr-l1; gr-l2]
  );
|)

end
