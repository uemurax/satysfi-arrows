@require: base/length
@require: base/inline
@require: base/list-ext

@import: arrows

module ArrowCommands : sig

val \draw : [float; float; Arrow.t] math-cmd

end = struct

let draw pos-f len-f arr ctx =
let fs = Context.get-font-size ctx in
let pos = fs *' pos-f in
let len = fs *' len-f in
let rec = Arrow.read arr ctx in
let md = rec#metadata in
let mb = md#body in
let mt = md#tail in
let mh = md#head in
let from = (0pt, pos) in
let w0 = mb#length +' mh#length +' mt#length in
let w = Length.max len w0 in
let to = (w, pos) in
let gr-l = rec#draw from to in
let l = List.fold-right Length.min 0pt [mb#mid-left; mb#end-left; mh#left; mt#left] in
let r = List.fold-right Length.max 0pt [mb#mid-right; mb#end-right; mh#right; mt#right] in
let h = pos -' l in
let d = r -' pos in
Inline.of-graphics w h d (fun pt -> List.map (Graphics.shift pt) gr-l)

let-math \draw pos len arr = text-in-math MathRel (draw pos len arr)

end
