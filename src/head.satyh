@require: base/context
@require: base/path
@require: base/length
@require: base/list-ext
@require: base/fn
@require: base/float
@require: base/graphics

@import: types
@import: lib/point
@import: lib/interval
@import: head-tail

module ArrowHead : sig

type t

% arrow head transformers
val none : t
val union : t -> t -> t
val shift : bool -> float -> t ->t
val duplicate : bool -> int -> float -> t -> t

% standard arrow heads
val vee : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t
val multi-vee : int -> float -> (|
  size : float;
  ext : float;
  line-width : float;
|) -> t
val triangle : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t
val harpoon-l : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t
val harpoon-r : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t

% mainly for internal usage
val of-path : (arrow-body-metadata -> context -> (|
  metadata : arrow-head-metadata;
  path : path;
  stroke : path -> graphics;
|))-> t
val make : (arrow-body-metadata -> context -> (|
  metadata : arrow-head-metadata;
  draw : float -> graphics list;
|)) -> t
val read : arrow-body-metadata -> t -> context -> (|
  metadata : arrow-head-metadata;
  draw : float -> graphics list;
|)

% for internal usage
val from-ht : ArrowHeadTail.t -> t
val to-ht : t -> ArrowHeadTail.t

end = struct

type ht = ArrowHeadTail.t
type t = ht

let from-ht ht = ht
let to-ht h = h
let make = ArrowHeadTail.make
let read = ArrowHeadTail.read

let none = ArrowHeadTail.none

let union = ArrowHeadTail.union

let shift keep-depth p-f head = make (fun body ctx -> (
  let h = read body head ctx in
  let m = h#metadata in
  let p = Context.get-font-size ctx *' p-f in
  let np = Length.neg p in
  (|
    metadata = (|
      m with
      length = m#length +' p;
      depth = (
        if keep-depth then m#depth
        else fun q -> m#depth q +' p
      );
    |);
    draw = fun a -> (
      h#draw a
      |> List.map (Graphics.shift Arrow-Point.(of-arg np a))
    );
  |)
))

let duplicate keep-depth n p-f head =
if n <= 0 then none
else (
  let-rec aux acc n = (
    if n <= 0 then acc
    else (
      let h1 = shift keep-depth p-f acc in
      aux (union head h1) (n - 1)
    )
  ) in
  aux head (n - 1)
)

let of-path f = make (fun body ctx -> (
  let rec = f body ctx in
  (|
    metadata = rec#metadata;
    draw = fun a -> (
      let dx = Float.cos a in
      let dy = Float.sin a in
      let path = linear-transform-path dx (Float.neg dy) dy dx rec#path in
      [rec#stroke path]
    );
  |)
))

let vee rec = of-path (fun body ctx -> (
  let fs = Context.get-font-size ctx in
  let color = Context.get-text-color ctx in
  let d1 = Length.max (fs *' rec#size) (Arrow-Interval.abs body#head) in
  let d2 = fs *' rec#ext in
  let d = d1 +' d2 in
  let nd = Length.neg d in
  let path = (
    List.fold-left (Fn.flip Path.line-to) (Path.start (nd, d)) [(0pt, 0pt); (nd, nd)]
    |> Path.terminate
  ) in
  (|
    metadata = (|
      interval = Arrow-Interval.make nd d;
      length = d;
      depth = Length.abs;
    |);
    path = path;
    stroke = Graphics.stroke (fs *' rec#line-width) color;
  |)
))

let multi-vee n p-f rec = duplicate true n p-f (vee rec)

let sqrt3 = Float.sqrt 3.

let triangle rec = of-path (fun body ctx -> (
  let fs = Context.get-font-size ctx in
  let color = Context.get-text-color ctx in
  let d1 = Length.max (fs *' rec#size) (Arrow-Interval.abs body#head) in
  let d2 = fs *' rec#ext in
  let d = d1 +' d2 in
  let nd = Length.neg d in
  let h = d *' sqrt3 in
  let nh = Length.neg h in
  let path = (
    List.fold-left (Fn.flip Path.line-to) (Path.start (0pt, 0pt)) [(nh, d); (nh, nd)]
    |> Path.close-with-line
  ) in
  (|
    metadata = (|
      interval = Arrow-Interval.make nd d;
      length = h;
      depth = fun _ -> h;
    |);
    path = path;
    stroke = Graphics.stroke (fs *' rec#line-width) color;
  |)
))

let harpoon-l-path rec body ctx =
let fs = Context.get-font-size ctx in
let color = Context.get-text-color ctx in
let r = Arrow-Interval.right body#head in
let d1 = Length.max (fs *' rec#size) (Arrow-Interval.width body#head) in
let d2 = fs *' rec#ext in
let d = d1 +' d2 in
let nd = Length.neg d in
(|
  metadata = (|
    interval = Arrow-Interval.make (r -' d) r;
    length = d;
    depth = fun p -> r -' p;
  |);
  path = (
    Path.start (0pt, 0pt)
    |> Path.line-to (nd, d)
    |> Path.terminate
    |> Path.shift (0pt, Length.neg r)
  );
  stroke = Graphics.stroke (fs *' rec#line-width) color;
|)

let harpoon-l rec = of-path (harpoon-l-path rec)

let harpoon-r-path rec body ctx =
let h1 = harpoon-l-path rec (|
  body with
  head = Arrow-Interval.neg body#head;
|) ctx in
let m1 = h1#metadata in
(|
  h1 with
  metadata = (|
    m1 with
    interval = Arrow-Interval.neg m1#interval;
    depth = fun p -> m1#depth (Length.neg p);
  |);
  path = linear-transform-path 1.0 0.0 0.0 (Float.neg 1.0) h1#path;
|)

let harpoon-r rec = of-path (harpoon-r-path rec)

end
