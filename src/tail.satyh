@require: base/float
@require: base/fn
@require: base/list-ext
@require: base/path
@require: base/graphics
@require: base/length
@require: base/context

@import: types

module ArrowTail : sig

type t

val make : (arrow-body-metadata -> context -> (|
  metadata : arrow-tail-metadata;
  draw : float -> graphics list;
|)) -> t
val read : arrow-body-metadata -> t -> context -> (|
  metadata : arrow-tail-metadata;
  draw : float -> graphics list;
|)

val of-path : (arrow-body-metadata -> context -> (|
  metadata : arrow-tail-metadata;
  path : path;
  stroke : path -> graphics;
|)) -> t

val none : t
val vee : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t

end = struct

type t = arrow-body-metadata -> context -> (|
  metadata : arrow-tail-metadata;
  draw : float -> graphics list;
|)

let make f = f
let read body rec ctx = rec body ctx

let none _ _ = (|
  metadata = (|
    left = 0pt;
    right = 0pt;
    length = 0pt;
    depth = fun _ -> 0pt;
  |);
  draw = fun _ -> [];
|)

let of-path f body ctx =
let rec = f body ctx in
(|
  metadata = rec#metadata;
  draw = fun a -> (
    let dx = Float.cos a in
    let dy = Float.sin a in
    let path = linear-transform-path dx (Float.neg dy) dy dx rec#path in
    [rec#stroke path]
  );
|)

let vee rec = of-path (fun body ctx -> (
  let fs = Context.get-font-size ctx in
  let color = Context.get-text-color ctx in
  let d1 = fs *' rec#size |> Length.max (body#end-right -' body#end-left) in
  let d2 = fs *' rec#ext in
  let d = d1 +' d2 in
  let nd = Length.neg d in
  let path = (
    List.fold-left (Fn.flip Path.line-to) (Path.start (0pt, d)) [(d, 0pt); (0pt, nd)]
    |> Path.terminate
  ) in
  (|
    metadata = (|
      left = nd;
      right = d;
      length = d;
      depth = fun x -> d -' (Length.abs x);
    |);
    path = path;
    stroke = Graphics.stroke (fs *' rec#line-width) color;
  |)
))

end
