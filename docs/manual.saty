@require: stdjareport

@import: ../src/arrows
@import: ../src/commands

let line-width = 0.05

let body1 = ArrowBody.(multiple 3 0.2 (solid (|
  width = line-width;
|)))
let head1 = ArrowHead.(vee (|
  line-width = line-width;
  size = 0.15;
  ext = 0.1;
|))
let body2 = ArrowBody.(solid (|
  width = line-width;
|))
let body3 = ArrowBody.(multiple 5 0.2 (solid (|
  width = line-width;
|)))

let-block ctx +dummy it =
let _ = read-inline ctx it in
block-nil

open ArrowCommands

in

document (|
  title = {Arrows manual};
  author = {Taichi Uemura};
|) '<
  +chapter{Basic usage}<
    +section{The `Arrow` module}<
      +p{
        The `arrows/arrows` package provides the `Arrow` module .
      }
      +code(```
type t
```);
      +p{
        This is the arrow type.
      }
      +code(```
val read : t -> context -> (|
  metadata : arrow-metadata;
  draw : point -> point -> graphics list;
|)
```);
      +p{
        The `read` function is a destructor for the type `t`.
        Use `draw` to draw the arrow as a list of graphics.
        `metadata` contains metadata like the size of the arrow head and the interval of the arrow body,
        and is intended to be used for placing labels and for stretching the arrow, for example.
        See Section \ref(`metadata`); for details of the type `arrow-metadata`.
      }
      +code(```
val solid : (|
  line-width : float;
  head-size : float;
|) -> t
```);
      +p{
        For quick construction of arrows, the `Arrow` module provides some preconfigured arrows like `solid`, `dashed`, `tail`, `harpoon-l` and `mapsto`.
        See Section \ref(`preconfigured-arrows`); for full details.
      }
      +code(```
val of-bth : (|
  body : ArrowBody.t;
  tail : ArrowTail.t;
  head : ArrowHead.t;
|) -> t
```);
      +p{
        The `of-bth` function constructs an arrow from an arrow body, an arrow tail, and an arrow head.
        Most arrow bodies, tails, and heads are designed such that they can be used in arbitrary combination.
        See Sections \ref(`arrow-body`);, \ref(`arrow-head`); and \ref(`arrow-tail`); for details of these components.
      }
    >
    +section?:(`arrow-body`){The `ArrowBody` module}<
      +p{
        The `arrows/body` package provides the `ArrowBody` module.
      }
      +code(```
type t
```);
      +p{
        This is the arrow body type.
      }
      +code(```
val read : t -> context -> (|
  metadata : arrow-body-metadata;
  draw : (|
    head : arrow-head-metadata;
    tail : arrow-tail-metadata;
  |) -> point -> point -> graphics list;
|)
```);
      +p{
        The `read` function is a destructor for the type `t`.
        The value `metadata` contains metadata like the interval and the minimum length of the arrow body.
        See Section \ref(`metadata`); for details of the type `arrow-body-metadata`.
        The `draw` function draws the arrow body, but it requires metadata of an arrow head and an arrow tail.
        This is because the exact graphics of the body of an arrow depend on the head and the tail of the arrow.
        For example, consider the following two arrows.
        \math-list(${
        | \draw!(Arrow.of-bth (|
          body = body1;
          head = ArrowHead.none;
          tail = ArrowTail.none;
        |))
        | \draw!(Arrow.of-bth (|
          body = body1;
          head = head1;
          tail = ArrowTail.none;
        |))
        |});%
        Both arrows have the same arrow body (three lines).
        The left arrow has the empty arrow head, and the right arrow has the arrow head which looks like “\>”.
        The exact graphics of the arrow body are different in these arrows:
        in the left arrow, all the lines have the same length\;
        in the right arrow, the top and bottom lines are shorter than the middle line.
      }
      +code(```
val solid : (|
  width : float;
|) -> t
```);
      +p{
        For quick construction of arrow bodies, the `ArrowBody` module provides some preconfigured arrow bodies like `solid` and `dashed`.
        See Section \ref(`preconfigured-arrow-bodies`); for full details.
      }
    >
    +section?:(`arrow-head`){The `ArrowHead` module}<
      +p{
        The `arrows/head` package provides the `ArrowHead` module.
      }
      +code(```
type t
```);
      +p{
        This is the arrow head type.
      }
      +code(```
val read : arrow-body-metadata -> t -> context -> (|
  metadata : arrow-head-metadata;
  draw : float -> graphics list;
|)
```);
      +p{
        The `read` function is a destructor for the type `t`.
        The value `metadata` contains metadata like the size of the arrow head.
        See Section \ref(`metadata`); for details of the type `arrow-head-metadata`.
        The `draw` function draws the arrow head at the origin `(0pt, 0pt)` towards the direction given by the first argument in radian.
        The `read` function requires metadata of an arrow body.
        This is because the arrow head in an arrow depends on the body of the arrow.
        For example, consider the following two arrows.
        \math-list(${
        | \draw!(Arrow.of-bth (|
          body = body2;
          head = head1;
          tail = ArrowTail.none;
        |))
        | \draw!(Arrow.of-bth (|
          body = body3;
          head = head1;
          tail = ArrowTail.none;
        |))
        |});%
        Both arrows have the same arrow head (looks like “\>”).
        The left arrow has the single line arrow body, and the right arrow has the five lines arrow body.
        In the right arrow, the arrow head is expanded to match the wide arrow body.
      }
      +code(```
val vee : (|
  size : float;
  ext : float;
  line-width : float;
|) -> t
```);
      +p{
        For quick construction of arrow heads, the `ArrowHead` module provides some preconfigured arrow heads like `vee`, `triangle` and `harpoon-l`.
        See \ref(`preconfigured-arrow-heads`); for full details.
      }
    >
    +section?:(`arrow-tail`){The `ArrowTail` module}<
      +p{
        The package `arrows/tail` provides the `ArrowTail` module.
        Arrow tails are essentially the same as arrow heads.
      }
    >
    +section?:(`metadata`){Metadata}<
      +p{
        Global types `arrow-metadata`, `arrow-body-metadata`, `arrow-head-metadata` and `arrow-tail-metadata` are defined in the `arrow/types` package.
      }
      +code(```
type arrow-metadata = (|
  body : arrow-body-metadata;
  head : arrow-head-metadata;
  tail : arrow-tail-metadata;
|)
```);
      +p{
        Metadata of an arrow consists of metadata of an arrow body, an arrow head and an arrow tail.
      }
      +code(```
type arrow-body-metadata = (|
  mid : Arrow-Interval.t;
  head : Arrow-Interval.t;
  tail : Arrow-Interval.t;
  length : length;
|)
```);
      +p{
        Metadata of an arrow body consist of the intervals of the middle, the head and the tail of the arrow body and the minimum length of the arrow body.
        An interval is a pair ${\paren{l, r}} of lengths such that ${l \leq r}.
        The value `mid` contains the coordinates of the left side and the right side of the middle of the arrow body facing to the arrow direction.
        The values `head` and `tail` are simlar.
      }
      +code(```
type arrow-head-tail-metadata = (|
  interval : Arrow-Interval.t;
  length : length;
  depth : length -> length;
|)
type arrow-head-metadata = arrow-head-tail-metadata
type arrow-tail-metadata = arrow-head-tail-metadata
```);
      +p{
        Metadata of arrow heads and arrow tails are the same.
        `interval` and `length` are similar to those of `arrow-body-metadata`.
        The function `depth` tells an arrow body the depth of the arrow head or tail at a position facing to the arrow direction.
        For example, the depth of the arrow head
        \eqn(${
          \draw!(Arrow.of-bth (|
            body = ArrowBody.none;
            tail = ArrowTail.none;
            head = ArrowHead.vee (|
              line-width = 0.05;
              size = 0.5;
              ext = 0.;
            |);
          |))
        });%
        at a position ${x} is ${\abs{x}}, so outer part of an arrow body will be shorter than the center of the arrow body.
      }
    >
  >
  +chapter{Package reference}<
    +section{The `Arrow` module}<
      +subsection?:(`preconfigured-arrows`){Preconfigured arrows}<
      >
    >
    +section{The `ArrowBody` module}<
      +subsection?:(`preconfigured-arrow-bodies`){Preconfigured arrow bodies}<
      >
    >
    +section{The `ArrowHead` module}<
      +subsection?:(`preconfigured-arrow-heads`){Preconfigured arrow heads}<
      >
    >
  >
  +dummy{${a}}
>
